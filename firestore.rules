rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // ========== HELPER FUNCTIONS ==========
    
    // Check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Check if user owns the resource
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    
    // Check if user is admin (simplified - admin can do everything)
    function isAdmin() {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/admins/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/admins/$(request.auth.uid)).data.isActive == true;
    }
    
    // Check if user is delivery partner
    function isDeliveryPartner() {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/delivery/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/delivery/$(request.auth.uid)).data.isActive == true;
    }
    
    // Check if user is customer
    function isCustomer() {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/customer/$(request.auth.uid));
    }
    
    // Check if delivery partner is assigned to order
    function isAssignedDeliveryPartner(orderId) {
      return isDeliveryPartner() && 
             get(/databases/$(database)/documents/orders/$(orderId)).data.assignedTo == request.auth.uid;
    }
    
    // ========== VALIDATION FUNCTIONS ==========
    
    // NEW: More specific validation for when a user document is first created.
    function validateUserCreateData(data) {
      return data.keys().hasAll(['uid', 'name', 'email', 'role', 'phoneNumber', 'createdAt']) &&
             data.uid == request.auth.uid &&
             data.name is string &&
             data.email is string && data.email.matches('.*@.*\\..*') &&
             data.role == 'customer' && // Ensures role is 'customer' on creation
             data.phoneNumber is string &&
             data.createdAt == request.time;
    }

    // NEW: More flexible validation for profile updates.
    // It prevents users from changing critical data like their role or UID,
    // while correctly validating only the fields that are being updated.
    function validateUserUpdateData(currentData, newData) {
      // Fields that a user should not be able to change
      let isUidUnchanged = newData.uid == currentData.uid;
      let isRoleUnchanged = newData.role == currentData.role;
      let isClientIdUnchanged = !('clientId' in newData.keys()) || newData.clientId == currentData.clientId;
      let isCreatedAtUnchanged = newData.createdAt == currentData.createdAt;

      // Validate fields that are allowed to be changed, only if they are present in the update request
      let isNameValid = !('name' in newData.keys()) || (newData.name is string && newData.name.size() > 0);
      let isEmailValid = !('email' in newData.keys()) || (newData.email is string && newData.email.matches('.*@.*\\..*'));
      let isPhoneValid = !('phoneNumber' in newData.keys()) || (newData.phoneNumber is string);
      let isProfileImageValid = !('profileImageUrl' in newData.keys()) || (newData.profileImageUrl is string);
      let isProfileCompleteValid = !('isProfileComplete' in newData.keys()) || (newData.isProfileComplete is bool);

      return isUidUnchanged && isRoleUnchanged && isClientIdUnchanged && isCreatedAtUnchanged &&
             isNameValid && isEmailValid && isPhoneValid && isProfileImageValid && isProfileCompleteValid;
    }
    
    function validateUserData(data) {
      return data.keys().hasAll(['uid', 'name', 'email', 'role']) &&
             data.uid is string &&
             data.name is string && data.name.size() > 0 &&
             data.email is string && data.email.matches('.*@.*\\..*') &&
             data.role is string && data.role in ['customer'];
    }
    
    function validateItemData(data) {
      return data.keys().hasAll(['name', 'pricePerPiece', 'isActive']) &&
             data.name is string && data.name.size() > 0 &&
             data.pricePerPiece is number && data.pricePerPiece >= 0 &&
             data.isActive is bool;
    }
    
    function validateBannerData(data) {
      return data.keys().hasAll(['title', 'isActive']) &&
             data.title is string && data.title.size() > 0 &&
             data.isActive is bool;
    }
    
    function validateOfferData(data) {
      return data.keys().hasAll(['title', 'isActive']) &&
             data.title is string && data.title.size() > 0 &&
             data.isActive is bool;
    }
    
    function validateOrderData(data) {
      return data.keys().hasAll(['userId', 'items', 'totalAmount', 'status']) &&
             data.userId is string &&
             data.items is list && data.items.size() > 0 &&
             data.totalAmount is number && data.totalAmount > 0 &&
             data.status is string;
    }
    
    // Check if only allowed fields are being updated by customer
    function isCustomerOrderUpdate() {
      let allowedFields = ['items', 'totalAmount', 'updatedAt'];
      let changedFields = request.resource.data.diff(resource.data).affectedKeys();
      return changedFields.hasOnly(allowedFields);
    }
    
    // Check if only delivery status fields are being updated
    function isDeliveryStatusUpdate() {
      let allowedFields = ['status', 'deliveryNotes', 'deliveredAt', 'updatedAt'];
      let changedFields = request.resource.data.diff(resource.data).affectedKeys();
      return changedFields.hasOnly(allowedFields);
    }
    
    // ========== COLLECTION RULES ==========
    
    // ADMINS COLLECTION
    // Admin can manage everything including other admins
    match /admins/{adminId} {
      allow read, write: if isAdmin();
    }
    
    // USERS COLLECTION (Customers) - Also handling 'customer' collection name
    match /users/{userId} {
      // Customers can read and update their own profile
      // Admins can do everything
      allow read: if isOwner(userId) || isAdmin();
      allow list: if isAdmin();
      allow create: if isAuthenticated() && 
                      (isOwner(userId) && validateUserData(request.resource.data)) || 
                      isAdmin();
      allow update: if (isOwner(userId) && validateUserData(request.resource.data)) || isAdmin();
      allow delete: if isAdmin();
      
      // User addresses subcollection
      match /addresses/{addressId} {
        allow read, list: if isOwner(userId) || isAdmin();
        allow create, update: if isOwner(userId) || isAdmin();
        allow delete: if isOwner(userId) || isAdmin();
      }
    }
    
    // CUSTOMER COLLECTION (Alternative name for users)
    match /customer/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow list: if isAdmin();
      
      // Use specific create validation for new users
      allow create: if (isOwner(userId) && validateUserCreateData(request.resource.data)) || isAdmin();
                      
      // Use flexible update validation for existing users
      allow update: if (isOwner(userId) && validateUserUpdateData(resource.data, request.resource.data)) || isAdmin();
      
      allow delete: if isAdmin();
      
      match /addresses/{addressId} {
        allow read, list, create, update, delete: if isOwner(userId) || isAdmin();
      }
    }
    
    // DELIVERY PARTNERS COLLECTION
    match /delivery/{deliveryId} {
      // Only admins can manage delivery partners
      // Delivery partners can read their own profile
      allow read: if isOwner(deliveryId) || isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
    
    // ITEMS COLLECTION
    match /items/{itemId} {
      // Everyone can view items (public)
      // Only admins can manage items
      allow read, list: if true;
      allow create: if isAdmin() && validateItemData(request.resource.data);
      allow update: if isAdmin() && validateItemData(request.resource.data);
      allow delete: if isAdmin();
    }
    
    // BANNERS COLLECTION
    match /banners/{bannerId} {
      // Everyone can view banners (public)
      // Only admins can manage banners
      allow read, list: if true;
      allow create: if isAdmin() && validateBannerData(request.resource.data);
      allow update: if isAdmin() && validateBannerData(request.resource.data);
      allow delete: if isAdmin();
    }
    
    // OFFERS COLLECTION
    match /offers/{offerId} {
      // Everyone can view offers (public)
      // Only admins can manage offers
      allow read, list: if true;
      allow create: if isAdmin() && validateOfferData(request.resource.data);
      allow update: if isAdmin() && validateOfferData(request.resource.data);
      allow delete: if isAdmin();
    }
    
    // ORDERS COLLECTION
    match /orders/{orderId} {
      // Customers can read their own orders
      // Delivery partners can read assigned orders
      // Admins can read all orders
      allow read: if isAdmin() || 
                    (isCustomer() && resource.data.userId == request.auth.uid) ||
                    (isDeliveryPartner() && resource.data.assignedTo == request.auth.uid);
      
      // List permissions
      allow list: if isAdmin() || 
                    (isCustomer() && request.auth.uid == resource.data.userId) ||
                    (isDeliveryPartner() && request.auth.uid == resource.data.assignedTo);
      
      // Customers can create their own orders
      allow create: if (isCustomer() && 
                       request.resource.data.userId == request.auth.uid && 
                       validateOrderData(request.resource.data)) || 
                      isAdmin();
      
      // Update permissions:
      // - Customers can update items and totalAmount only
      // - Delivery partners can update status and delivery notes
      // - Admins can update anything
      allow update: if isAdmin() ||
                      (isCustomer() && 
                       resource.data.userId == request.auth.uid && 
                       isCustomerOrderUpdate()) ||
                      (isDeliveryPartner() && 
                       resource.data.assignedTo == request.auth.uid && 
                       isDeliveryStatusUpdate());
      
      // Only admins can delete orders
      allow delete: if isAdmin();
    }
    
    // QUICK ORDER NOTIFICATIONS COLLECTION
    match /quickOrderNotifications/{notificationId} {
      // Customers can create quick orders
      // Delivery partners can read and update
      // Admins have full access
      allow read: if isCustomer() || isDeliveryPartner() || isAdmin();
      allow list: if isDeliveryPartner() || isAdmin();
      allow create: if isCustomer() || isAdmin();
      allow update: if isDeliveryPartner() || isAdmin();
      allow delete: if isAdmin();
    }
    
    // NOTIFICATIONS COLLECTION
    match /notifications/{notificationId} {
      // Users can read their own notifications
      // Admins can manage all notifications
      allow read: if (resource.data.userId == request.auth.uid) || isAdmin();
      allow list: if isAdmin();
      allow create, update, delete: if isAdmin();
    }
    
    // ANALYTICS COLLECTION
    match /analytics/{docId} {
      // Only admins can access analytics
      allow read, write: if isAdmin();
    }
    
    // SETTINGS COLLECTION
    match /settings/{settingId} {
      // Everyone can read settings (app configuration)
      // Only admins can modify settings
      allow read: if true;
      allow list: if isAdmin();
      allow create, update, delete: if isAdmin();
    }
    
    // CATEGORIES COLLECTION
    match /categories/{categoryId} {
      // Everyone can view categories
      // Only admins can manage categories
      allow read, list: if true;
      allow create, update, delete: if isAdmin();
    }
    
    // REPORTS COLLECTION (for delivery reports, sales reports, etc.)
    match /reports/{reportId} {
      // Only admins can access reports
      allow read, write: if isAdmin();
    }
    
    // PAYMENT HISTORY COLLECTION
    match /paymentHistory/{paymentId} {
      // Users can read their own payment history
      // Admins can access all payment history
      allow read: if (resource.data.userId == request.auth.uid) || isAdmin();
      allow list: if isAdmin();
      allow create, update, delete: if isAdmin();
    }
    
    // FEEDBACK/REVIEWS COLLECTION
    match /feedback/{feedbackId} {
      // Users can create feedback for their orders
      // Everyone can read feedback
      // Only admins can delete feedback
      allow read, list: if true;
      allow create: if isCustomer() && request.resource.data.userId == request.auth.uid;
      allow update: if isOwner(resource.data.userId) || isAdmin();
      allow delete: if isAdmin();
    }
    
    // DEFAULT RULE - Deny all access to undefined collections
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
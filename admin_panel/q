rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // ========== HELPER FUNCTIONS ==========
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isAdmin() {
      let adminPath = /databases/$(database)/documents/admins/$(request.auth.uid);
      return isAuthenticated() && exists(adminPath) && get(adminPath).data.isActive == true;
    }
    
    function isDeliveryPartner() {
      let deliveryPath = /databases/$(database)/documents/delivery/$(request.auth.uid);
      return isAuthenticated() && exists(deliveryPath) && get(deliveryPath).data.isActive == true;
    }
    
    function isCustomer() {
      let customerPath = /databases/$(database)/documents/customer/$(request.auth.uid);
      return isAuthenticated() && exists(customerPath);
    }
    
    // ========== COLLECTION RULES ==========
    
    // ADMINS: Allow phone verification during login
    match /admins/{adminId} {
      // CRITICAL FIX: Allow unauthenticated users to read admin docs for phone verification
      // This is needed for login flow to verify if admin exists with given phone number
      allow read: if true; // Anyone can read to verify phone numbers during login
      
      // An admin can update any admin document. A user can update their own.
      allow update: if isAdmin() || isOwner(adminId);
      
      // An admin can be created by a new user (bootstrapping) or by another admin.
      allow create: if isOwner(adminId) || isAdmin();
      
      // Only admins can list or delete other admins.
      allow list: if true; // Allow listing for phone verification during login
      allow delete: if isAdmin();
    }
    
    // DELIVERY PARTNERS: Admins create. Partners can link their profile once and then edit.
    match /delivery/{partnerId} {
      // Allow unauthenticated read for delivery partner phone verification
      allow read: if true; // Allow reading for phone verification during login
      allow create, delete: if isAdmin();
      allow update: if isAdmin() || (isOwner(partnerId) && resource.data.uid == request.resource.data.uid);
      allow list: if isAuthenticated(); // Authenticated users can list delivery partners
    }
    
    match /delivery_personnel/{partnerId} { // Legacy support
      allow read: if true; // Allow reading for phone verification during login
      allow create, delete: if isAdmin();
      allow update: if isAdmin() || (isOwner(partnerId) && resource.data.uid == request.resource.data.uid);
      allow list: if isAuthenticated(); // Authenticated users can list delivery partners
    }
    
    // CUSTOMERS: Can create their own account and update their own data
    match /customer/{customerId} { 
      // Admins have full access to all customer documents
      allow read, write: if isAdmin();
      
      // Customers can create their own document (during registration)
      allow create: if isAuthenticated() && request.auth.uid == customerId;
      
      // Customers can read and update their own document
      allow read, update: if isOwner(customerId);
      
      // Admins can list all customers, customers can only read their own
      allow list: if isAdmin();
      
      // CUSTOMER ADDRESSES SUBCOLLECTION
      match /addresses/{addressId} {
        // Admins have full access to all customer addresses
        allow read, write: if isAdmin();
        
        // Customers can manage their own addresses
        allow create, read, update, delete: if isOwner(customerId);
        
        // Customers can list their own addresses
        allow list: if isOwner(customerId);
      }
    }
    
    // LEGACY: Support for users collection (if you're migrating from users to customer)
    match /users/{userId} { 
      allow read, write: if isAdmin();
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow read, update: if isOwner(userId);
      allow list: if isAdmin();
      
      // USER ADDRESSES SUBCOLLECTION (for legacy support)
      match /addresses/{addressId} {
        // Admins have full access to all user addresses
        allow read, write: if isAdmin();
        
        // Users can manage their own addresses
        allow create, read, update, delete: if isOwner(userId);
        
        // Users can list their own addresses
        allow list: if isOwner(userId);
      }
    }
    
    // ORDERS: Customers can create and manage their orders
    match /orders/{orderId} { 
      // Admins have full access to all orders
      allow read, write: if isAuthenticated();
      
      // Customers can create orders
      allow create: if isAuthenticated() && request.resource.data.customerId == request.auth.uid;
      
      // Customers can read their own orders
      allow read: if isAuthenticated() && resource.data.customerId == request.auth.uid;
      
      // Customers can update certain fields of their own orders (like cancellation)
      allow update: if isAuthenticated() && 
        resource.data.customerId == request.auth.uid &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'updatedAt', 'cancelReason']);
      
      // Delivery partners can read and update delivery status
      allow read: if isDeliveryPartner();
      allow update: if isDeliveryPartner() && 
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'deliveryStatus', 'updatedAt', 'completedAt', 'deliveredAt']);
      
      // Allow customers to list their own orders
      allow list: if isAuthenticated() && request.auth.uid != null;
    }
    
    // Publicly readable collections for the customer app. Admins have write access.
    match /items/{doc=**} { 
      allow read: if true; 
      allow write: if isAdmin(); 
    }
    
    match /banners/{doc=**} { 
      allow read: if true; 
      allow write: if isAdmin(); 
    }
    
    match /offers/{doc=**} { 
      allow read: if true; 
      allow write: if isAdmin(); 
    }
    
    match /categories/{doc=**} { 
      allow read: if true; 
      allow write: if isAdmin(); 
    }
    
    match /settings/{doc=**} { 
      allow read: if true; 
      allow write: if isAdmin(); 
    }
    
    // FEEDBACK: Customers can create feedback, admins can manage all
    match /feedback/{feedbackId} {
      allow read: if true;
      allow create: if isAuthenticated();
      allow update: if isAdmin() || (isAuthenticated() && resource.data.userId == request.auth.uid);
      allow delete: if isAdmin();
      allow list: if isAdmin();
    }
  }
}